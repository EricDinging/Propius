//  python -m grpc_tools.protoc --proto_path=. ./propius.proto --python_out=. --grpc_python_out=. 
//  import src.channels.propius_pb2 as propius__pb2

syntax = "proto3";

package propius;

service Job {
    rpc CLIENT_REQUEST (client_id) returns (plan) {}
    rpc CLIENT_REPORT (client_report) returns (empty) {}
}

service Job_manager {
    rpc JOB_REGIST (job_info) returns (ack) {}
    rpc JOB_REQUEST (job_round_info) returns (ack) {}
    rpc JOB_FINISH (job_id) returns (empty) {}
}

service Scheduler {
    rpc JOB_SCORE_UPDATE (job_id) returns (ack) {}
}

service Client_manager {
    rpc CLIENT_CHECKIN (client_checkin) returns (cm_offer) {}
    rpc CLIENT_ACCEPT (client_accept) returns (cm_ack) {}
}

message client_checkin {
    int32 client_id = 1;
    bytes public_specification = 2;
}

message cm_offer {
    bytes task_offer = 1;
    bytes private_constraint = 2;
}

message client_accept {
    int32 client_id = 1;
    int32 task_id = 2;
}

message cm_ack {
    bool ack = 1;
    bytes job_ip = 2;
    int32 job_port = 3;
}

message plan {
    int32 workload = 1;
}

message client_id {
    int32 id = 1;
}

message job_id {
    int32 id = 1;
}

message job_info {
    int32 id = 1;
    int32 est_demand = 2;
    int32 est_total_round = 3;
    bytes public_constraint = 4;
    bytes private_constraint = 5;
    bytes ip = 6;
    int32 port = 7;
}

message job_round_info {
    int32 id = 1;
    int32 demand = 2;
}

message client_report {
    int32 client_id = 1;
    float result = 2;
}

message empty {
}

message ack {
    bool ack = 1;
}