# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import tests.test_job.parameter_server.channels.parameter_server_pb2 as parameter__server__pb2


class Parameter_serverStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CLIENT_REQUEST = channel.unary_unary(
                '/parameter_server.Parameter_server/CLIENT_REQUEST',
                request_serializer=parameter__server__pb2.client_id.SerializeToString,
                response_deserializer=parameter__server__pb2.plan.FromString,
                )
        self.CLIENT_REPORT = channel.unary_unary(
                '/parameter_server.Parameter_server/CLIENT_REPORT',
                request_serializer=parameter__server__pb2.client_report.SerializeToString,
                response_deserializer=parameter__server__pb2.empty.FromString,
                )


class Parameter_serverServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CLIENT_REQUEST(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CLIENT_REPORT(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_Parameter_serverServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CLIENT_REQUEST': grpc.unary_unary_rpc_method_handler(
                    servicer.CLIENT_REQUEST,
                    request_deserializer=parameter__server__pb2.client_id.FromString,
                    response_serializer=parameter__server__pb2.plan.SerializeToString,
            ),
            'CLIENT_REPORT': grpc.unary_unary_rpc_method_handler(
                    servicer.CLIENT_REPORT,
                    request_deserializer=parameter__server__pb2.client_report.FromString,
                    response_serializer=parameter__server__pb2.empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'parameter_server.Parameter_server', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Parameter_server(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CLIENT_REQUEST(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/parameter_server.Parameter_server/CLIENT_REQUEST',
            parameter__server__pb2.client_id.SerializeToString,
            parameter__server__pb2.plan.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CLIENT_REPORT(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/parameter_server.Parameter_server/CLIENT_REPORT',
            parameter__server__pb2.client_report.SerializeToString,
            parameter__server__pb2.empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
